name: Build and Release VCV Rack Plugin

env:
  VCV_DIR: .

on:
  push:
    tags:
      - vcv-rack/v*
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to run the release for (e.g. vcv-rack/v2.0.1)'
        required: true

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-14
            platform: mac-arm64
            sdk_url: https://vcvrack.com/downloads/Rack-SDK-2.6.4-mac-arm64.zip
          - os: macos-13
            platform: mac-x64
            sdk_url: https://vcvrack.com/downloads/Rack-SDK-2.6.4-mac-x64.zip
          - os: windows-latest
            platform: win-x64
            sdk_url: https://vcvrack.com/downloads/Rack-SDK-2.6.4-win-x64.zip
          - os: ubuntu-latest
            platform: lin-x64
            sdk_url: https://vcvrack.com/downloads/Rack-SDK-2.6.4-lin-x64.zip

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch full history and tags
        run: git fetch --tags --unshallow

      - name: Extract version
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi

          # First remove the vcv-rack/ prefix
          VERSION="${TAG#vcv-rack/}"
          # Then remove the v prefix if it exists
          VERSION="${VERSION#v}"
          
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Debug version
        run: |
          echo "Tag: ${{ steps.version.outputs.tag }}"
          echo "Version: ${{ steps.version.outputs.version }}"

      - name: Extract version from plugin.json
        id: plugin
        shell: bash
        run: |
          JSON_VERSION=$(jq -r .version ${{ env.VCV_DIR }}/plugin.json)
          echo "plugin_version=$JSON_VERSION" >> "$GITHUB_OUTPUT"

      - name: Validate version match
        shell: bash
        run: |
          if [ "${{ steps.version.outputs.version }}" != "${{ steps.plugin.outputs.plugin_version }}" ]; then
            echo "❌ Tag version (${{ steps.version.outputs.version }}) and plugin.json version (${{ steps.plugin.outputs.plugin_version }}) mismatch"
            exit 1
          fi

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install jq

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq build-essential libglu1-mesa-dev libx11-dev libxext-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgtk-3-dev

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: choco install jq -y

      - name: Download Rack SDK
        shell: bash
        run: |
          curl -L ${{ matrix.sdk_url }} -o ${{ env.VCV_DIR }}/Rack-SDK.zip
          unzip Rack-SDK.zip -d Rack-SDK

      - name: Build plugin
        shell: bash
        run: |
          cd ${{ env.VCV_DIR }}
          export RACK_DIR="${PWD}/Rack-SDK/Rack-SDK"
          export CORES_DIR="${PWD}/./cores"
          make
          make dist

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-${{ matrix.platform }}
          path: ${{ env.VCV_DIR }}/dist/*.vcvplugin
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch full history and tags
        run: git fetch --tags --unshallow

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi

          # First remove the vcv-rack/ prefix
          VERSION="${TAG#vcv-rack/}"
          # Then remove the v prefix if it exists
          VERSION="${VERSION#v}"
          
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Extract version from plugin.json
        id: plugin
        run: |
          JSON_VERSION=$(jq -r .version ${{ env.VCV_DIR }}/plugin.json)
          echo "plugin_version=$JSON_VERSION" >> "$GITHUB_OUTPUT"

      - name: Set up Rust (for git-cliff)
        uses: dtolnay/rust-toolchain@stable

      - name: Install git-cliff
        run: cargo install git-cliff

      - name: Generate CHANGELOG.md
        run: |
          cd ${{ env.VCV_DIR }}
          git cliff -o CHANGELOG_FULL.md
          cd ..
          cat ${{ env.VCV_DIR }}/CHANGELOG_FULL.md

      - name: Extract changelog for current version
        run: |
          TAG=${{ steps.version.outputs.tag }}
          echo "Extracting changelog section for tag prefix: $TAG"
          awk -v tag="$TAG" '
            $0 ~ "^## \\[" tag "\\]" {
              found = 1
              print
              next
            }
            found && /^## \[/ { exit }
            found { print }
          ' ${{ env.VCV_DIR }}/CHANGELOG_FULL.md > ${{ env.VCV_DIR }}/CHANGELOG.md
          echo "=== Extracted CHANGELOG.md ==="
          cat ${{ env.VCV_DIR }}/CHANGELOG.md

      - name: Prepend hand-written notes (if any)
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          NOTES_FILE="${{ env.VCV_DIR }}/release-notes/v${VERSION}.md"
          CHANGELOG_FILE="${{ env.VCV_DIR }}/CHANGELOG.md"
          TEMP_FILE=$(mktemp)
          if [ -f "$NOTES_FILE" ]; then
            cat "$NOTES_FILE" > "$TEMP_FILE"
          else
            echo "# Notes for version ${VERSION}" > "$TEMP_FILE"
          fi
          echo -e "\n" >> "$TEMP_FILE"
          cat "$CHANGELOG_FILE" >> "$TEMP_FILE"
          mv "$TEMP_FILE" "$CHANGELOG_FILE"
          cat "$CHANGELOG_FILE"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files
          find artifacts -name "*.vcvplugin" -exec cp {} release-files/ \;
          ls -la release-files/

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          body_path: ${{ env.VCV_DIR }}/CHANGELOG.md
          files: release-files/*.vcvplugin
